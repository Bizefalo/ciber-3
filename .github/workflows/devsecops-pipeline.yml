name: DevSecOps Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  static-analysis:
    name: üîç An√°lisis Est√°tico
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar ESLint
        run: npm run lint:security

  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar tests
        run: npm run test

      - name: Generar reporte de cobertura
        run: npm run test:coverage

      - name: Subir cobertura a Codecov
        uses: codecov/codecov-action@v3

  build-and-scan:
    name: üê≥ Build & Trivy Scan
    runs-on: ubuntu-latest
    needs: [static-analysis, test]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Subir resultados Trivy
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  dast-scan:
    name: üï∑Ô∏è DAST con ZAP
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Build y correr app
        run: |
          docker build -t miapp-segura .
          docker run -d -p 3000:3000 --name test-app miapp-segura
          sleep 30

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Parar contenedor
        run: docker stop test-app

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [build-and-scan, dast-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Login al registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build y push de imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Desplegar (simulado)
        run: echo "üöÄ Desplegando a producci√≥n..."
